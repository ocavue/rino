name: main

on:
  push:
    branches:
      - "**"

env:
  NEXT_TELEMETRY_DISABLED: 1 # https://nextjs.org/telemetry

jobs:
  build_website:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/dependencies

      - name: Build home
        run: |
          pnpm -F home build

      - name: Build editor playground
        run: |
          pnpm -F editor build:all

      - name: Upload dist (home)
        uses: actions/upload-artifact@v3
        with:
          name: home_dist
          path: ./packages/home/dist

      - name: Upload dist (editor playground)
        uses: actions/upload-artifact@v3
        with:
          name: editor_playground_dist
          path: ./packages/editor/playground/dist

  build_packages:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/dependencies

      - name: Build electron dependencies
        run: |
          pnpm --filter '@rino.app/electron-*...' build

  build_electron:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/dependencies

      - name: Update package.json
        run: |
          version=$(cat version.txt)
          pkgjson=$(jq ".version = \"$version\"" ./packages/electron/package.json)
          echo "$pkgjson" > ./packages/electron/package.json
          cat ./packages/electron/package.json

      - name: Build electron dependencies
        run: |
          pnpm --filter '@rino.app/electron-*...' build

      - name: Build electron
        run: |
          pnpm --filter '@rino.app/electron' build:all
        env:
          ELECTRON_APPLE_ID_NAME: ${{ secrets.ELECTRON_APPLE_ID_NAME }}
          ELECTRON_APPLE_ID: ${{ secrets.ELECTRON_APPLE_ID }}
          ELECTRON_APPLE_ID_PASSWORD: ${{ secrets.ELECTRON_APPLE_ID_PASSWORD }}
          CSC_LINK: ${{ secrets.ELECTRON_MAC_P12_BASE64 }}
          CSC_KEY_PASSWORD: ${{ secrets.ELECTRON_MAC_P12_PASSWORD }}

      - name: Clean electron dist
        run: |
          cd packages/electron
          echo '============== before cleaning =============='
          find ./dist -type f
          echo '============== cleaning ====================='
          rm -rf ./dist/*/
          echo '============== after cleaning ==============='
          find ./dist -type f

      - name: Upload dist (electron)
        uses: actions/upload-artifact@v3
        with:
          name: electron_dist
          path: ./packages/electron/dist

      - name: Upload dist (electron dmg)
        uses: actions/upload-artifact@v3
        if: "contains(github.event.head_commit.message, 'UPLOAD_DMG')"
        with:
          name: electron_dist_dmg
          path: ./packages/electron/dist/*.dmg

      - name: Upload dist (electron exe)
        uses: actions/upload-artifact@v3
        if: "contains(github.event.head_commit.message, 'UPLOAD_EXE')"
        with:
          name: electron_dist_exe
          path: ./packages/electron/dist/*.exe

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/dependencies

      - name: Build dependencies
        env:
          REACT_APP_TEST_USERNAME: ${{ secrets.REACT_APP_TEST_USERNAME }}
          REACT_APP_TEST_PASSWORD: ${{ secrets.REACT_APP_TEST_PASSWORD }}
          REACT_APP_TESTING: 1
        run: |
          pnpm --filter @rino.app/common build

      - name: Run tests
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }} # https://firebase.google.com/docs/cli#cli-ci-systems
          REACT_APP_TEST_USERNAME: ${{ secrets.REACT_APP_TEST_USERNAME }}
          REACT_APP_TEST_PASSWORD: ${{ secrets.REACT_APP_TEST_PASSWORD }}
        run: |
          pnpm test:coverage

      - name: Upload coverage information to codecov
        uses: codecov/codecov-action@v2
        with:
          file: ./coverage/coverage-final.json
          fail_ci_if_error: false # Specify if CI pipeline should fail when Codecov runs into errors during upload. Defaults to false

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/dependencies

      - name: Lint
        run: pnpm lint .

  preview: # Preview deployment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/dependencies

      - name: Build
        run: |
          pnpm -F home build
          pnpm -F editor build:all

      - id: step_branch
        name: Get the branch name
        run: |
          echo "::set-output name=branch::$(node scripts/slugify-branch.js)"

      - id: step_vercel_home
        name: Deploy @rino.app/home to Vercel
        # Vercel only allows a free account to deploy 100 times every day so this step could fail
        continue-on-error: true
        timeout-minutes: 10
        uses: amondnet/vercel-action@v20
        with:
          github-comment: false
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_HOME }}
          alias-domains: rino-home-${{ steps.step_branch.outputs.branch }}.ocavue.vercel.app
          vercel-args: "--meta TYPE=PREVIEW"
          working-directory: "./packages/home/dist/"

      - id: step_vercel_editor
        name: Deploy @rino.app/editor to Vercel
        continue-on-error: true
        timeout-minutes: 10
        uses: amondnet/vercel-action@v20
        with:
          github-comment: false
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_EDITOR }}
          alias-domains: rino-editor-${{ steps.step_branch.outputs.branch }}.ocavue.vercel.app
          vercel-args: "--meta TYPE=PREVIEW"
          working-directory: "./packages/editor/playground/dist/"

      - id: step_find_pr
        uses: jwalton/gh-find-current-pr@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ steps.step_find_pr.outputs.pr }}
          message: |
            ## Preview Deployment
            ${{ github.sha }}:
            - https://rino-home-${{ steps.step_branch.outputs.branch }}.ocavue.vercel.app
            - https://rino-editor-${{ steps.step_branch.outputs.branch }}.ocavue.vercel.app
        continue-on-error: true

      - name: Generate configrations for Lighthouse CI
        run: node scripts/generate-lighthouserc.js
        if: steps.step_vercel_home.outcome == 'success'

      - name: Run lighthouse
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }} # Install this GitHub App and get the token: https://github.com/apps/lighthouse-ci
        run: |
          pnpx lhci autorun --config .lighthouserc.home.json
        if: steps.step_vercel_home.outcome == 'success'

  release:
    runs-on: ubuntu-latest
    needs:
      - build_website
      - build_electron
      - test
      - lint
      - preview
    if: github.ref == 'refs/heads/master'
    steps:
      - id: step_release_please
        uses: GoogleCloudPlatform/release-please-action@v3
        with:
          token: ${{ secrets.RELEASE_PLEASE_GITHUB_TOKEN }}
          release-type: simple

    outputs:
      published: ${{ steps.step_release_please.outputs.release_created }}
      tag_name: ${{ steps.step_release_please.outputs.tag_name }}

  deploy: # Production deployment
    runs-on: ubuntu-latest
    needs:
      # make sure that `deploy` only depends on `release` because we don't want `deploy` to skip if `release` succeeded.
      - release
    steps:
      - uses: actions/checkout@v3

      - name: Download dist (electron)
        uses: actions/download-artifact@v3
        if: ${{ github.ref == 'refs/heads/master' && needs.release.outputs.published == 'true' }}
        with:
          name: electron_dist
          path: ./packages/electron/dist

      - name: Upload @rino.app/electron to GitHub Release
        uses: svenstaro/upload-release-action@v2
        if: ${{ github.ref == 'refs/heads/master' && needs.release.outputs.published == 'true' }}
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./packages/electron/dist/*
          tag: ${{ needs.release.outputs.tag_name }}
          overwrite: true
          file_glob: true

      - name: Download dist (home)
        uses: actions/download-artifact@v3
        with:
          name: home_dist
          path: ./packages/home/dist

      - id: step_vercel_home
        name: Deploy @rino.app/home to Vercel
        continue-on-error: true
        timeout-minutes: 10
        uses: amondnet/vercel-action@v20
        with:
          github-comment: false
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_HOME }}
          alias-domains: rino-home-master.ocavue.vercel.app
          vercel-args: "--prod --meta TYPE=PRODUCTION"
          working-directory: "./packages/home/dist/"

      - id: step_vercel_editor
        name: Deploy @rino.app/editor to Vercel
        continue-on-error: true
        timeout-minutes: 10
        uses: amondnet/vercel-action@v20
        with:
          github-comment: false
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_EDITOR }}
          alias-domains: rino-editor-master.ocavue.vercel.app
          vercel-args: "--prod --meta TYPE=PRODUCTION"
          working-directory: "./packages/editor/playground/dist/"
