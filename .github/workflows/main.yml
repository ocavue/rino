{
  "name": "main",
  "on": {
    "push": {
      "branches": [
        "**"
      ]
    }
  },
  "env": {
    "NEXT_TELEMETRY_DISABLED": 1
  },
  "jobs": {
    "Build website": {
      "runs-on": "ubuntu-18.04",
      "steps": [
        {
          "name": "Checkout code repository",
          "uses": "actions/checkout@v2"
        },
        {
          "name": "Setup node.js",
          "uses": "actions/setup-node@v2",
          "with": {
            "node-version": 14
          }
        },
        {
          "id": "step_cache_deps",
          "name": "Cache dependencies",
          "uses": "actions/cache@v2",
          "with": {
            "path": "node_modules\n*/*/node_modules\n~/.cache/firebase\n~/.cache/ms-playwright\n.yarn/cache\n",
            "key": "${{ runner.os }}-deps-v6-${{ hashFiles('yarn.lock') }}"
          }
        },
        {
          "name": "Install Dependencies",
          "run": "date\nyarn install --immutable\ndate\necho \"[DEBUG] CACHE_HIT: $CACHE_HIT\"\nif [ \"$CACHE_HIT\" != \"true\" ]\nthen\n  echo \"[DEBUG] installing\"\n  yarn run web firebase setup:emulators:firestore\nfi\nls -lrth ~/.cache/firebase/emulators/\n",
          "env": {
            "CACHE_HIT": "${{ steps.step_cache_deps.outputs.cache-hit }}"
          }
        },
        {
          "name": "Configrate firebase",
          "env": {
            "FIREBASE_CLIENT_JSON": "${{ secrets.FIREBASE_CLIENT_JSON }}",
            "FIREBASE_TOKEN": "${{ secrets.FIREBASE_TOKEN }}"
          },
          "run": "echo \"${FIREBASE_CLIENT_JSON}\" > ./packages/web/config/firebase.client.json\nexport FIREBASE_PROJECT_ID=$(scripts/simple_jq.js ./packages/web/config/firebase.client.json .projectId)\nyarn run web firebase use --add $FIREBASE_PROJECT_ID\n"
        },
        {
          "name": "Build website",
          "run": "yarn run build:website\n"
        },
        {
          "name": "Upload dist (web)",
          "uses": "actions/upload-artifact@v2",
          "with": {
            "name": "web_dist",
            "path": "./packages/web/dist"
          }
        },
        {
          "name": "Upload dist (home)",
          "uses": "actions/upload-artifact@v2",
          "with": {
            "name": "home_dist",
            "path": "./packages/home/dist"
          }
        }
      ]
    },
    "Build electron": {
      "runs-on": "macos-10.15",
      "steps": [
        {
          "name": "Checkout code repository",
          "uses": "actions/checkout@v2"
        },
        {
          "name": "Setup node.js",
          "uses": "actions/setup-node@v2",
          "with": {
            "node-version": 14
          }
        },
        {
          "id": "step_cache_deps",
          "name": "Cache dependencies",
          "uses": "actions/cache@v2",
          "with": {
            "path": "node_modules\n*/*/node_modules\n~/.cache/firebase\n~/.cache/ms-playwright\n.yarn/cache\n",
            "key": "${{ runner.os }}-deps-v6-${{ hashFiles('yarn.lock') }}"
          }
        },
        {
          "name": "Install Dependencies",
          "run": "date\nyarn install --immutable\ndate\necho \"[DEBUG] CACHE_HIT: $CACHE_HIT\"\nif [ \"$CACHE_HIT\" != \"true\" ]\nthen\n  echo \"[DEBUG] installing\"\n  yarn run web firebase setup:emulators:firestore\nfi\nls -lrth ~/.cache/firebase/emulators/\n",
          "env": {
            "CACHE_HIT": "${{ steps.step_cache_deps.outputs.cache-hit }}"
          }
        },
        {
          "name": "Update package.json",
          "run": "version=$(cat version.txt)\npkgjson=$(jq \".version = \\\"$version\\\"\" ./packages/electron/package.json)\necho \"$pkgjson\" > ./packages/electron/package.json\ncat ./packages/electron/package.json\n"
        },
        {
          "name": "Build electron",
          "run": "yarn run electron build\n"
        },
        {
          "name": "Clean electron dist",
          "run": "find ./packages/electron/dist -type f\necho \"================ cleaning ================\"\nrm -rf ./packages/electron/dist/mac\nfind ./packages/electron/dist -type f\n"
        },
        {
          "name": "Upload dist (electron)",
          "uses": "actions/upload-artifact@v2",
          "with": {
            "name": "electron_dist",
            "path": "./packages/electron/dist"
          }
        }
      ]
    },
    "Test": {
      "runs-on": "ubuntu-18.04",
      "steps": [
        {
          "name": "Checkout code repository",
          "uses": "actions/checkout@v2"
        },
        {
          "name": "Setup node.js",
          "uses": "actions/setup-node@v2",
          "with": {
            "node-version": 14
          }
        },
        {
          "id": "step_cache_deps",
          "name": "Cache dependencies",
          "uses": "actions/cache@v2",
          "with": {
            "path": "node_modules\n*/*/node_modules\n~/.cache/firebase\n~/.cache/ms-playwright\n.yarn/cache\n",
            "key": "${{ runner.os }}-deps-v6-${{ hashFiles('yarn.lock') }}"
          }
        },
        {
          "name": "Install Dependencies",
          "run": "date\nyarn install --immutable\ndate\necho \"[DEBUG] CACHE_HIT: $CACHE_HIT\"\nif [ \"$CACHE_HIT\" != \"true\" ]\nthen\n  echo \"[DEBUG] installing\"\n  yarn run web firebase setup:emulators:firestore\nfi\nls -lrth ~/.cache/firebase/emulators/\n",
          "env": {
            "CACHE_HIT": "${{ steps.step_cache_deps.outputs.cache-hit }}"
          }
        },
        {
          "name": "Configrate firebase",
          "env": {
            "FIREBASE_CLIENT_JSON": "${{ secrets.FIREBASE_CLIENT_JSON }}",
            "FIREBASE_TOKEN": "${{ secrets.FIREBASE_TOKEN }}"
          },
          "run": "echo \"${FIREBASE_CLIENT_JSON}\" > ./packages/web/config/firebase.client.json\nexport FIREBASE_PROJECT_ID=$(scripts/simple_jq.js ./packages/web/config/firebase.client.json .projectId)\nyarn run web firebase use --add $FIREBASE_PROJECT_ID\n"
        },
        {
          "name": "Build static files",
          "env": {
            "REACT_APP_TEST_USERNAME": "${{ secrets.REACT_APP_TEST_USERNAME }}",
            "REACT_APP_TEST_PASSWORD": "${{ secrets.REACT_APP_TEST_PASSWORD }}",
            "REACT_APP_TESTING": 1
          },
          "run": "export FIREBASE_DATABASE_EMULATOR_HOST=\"localhost:$(scripts/simple_jq.js ./packages/web/firebase.json .emulators.database.port)\"\nexport FIRESTORE_EMULATOR_HOST=\"localhost:$(scripts/simple_jq.js ./packages/web/firebase.json .emulators.firestore.port)\"\necho \"firebase environment variables:\" $FIREBASE_DATABASE_EMULATOR_HOST $FIRESTORE_EMULATOR_HOST\nyarn run build:website\n"
        },
        {
          "name": "Run tests",
          "env": {
            "FIREBASE_TOKEN": "${{ secrets.FIREBASE_TOKEN }}",
            "REACT_APP_TEST_USERNAME": "${{ secrets.REACT_APP_TEST_USERNAME }}",
            "REACT_APP_TEST_PASSWORD": "${{ secrets.REACT_APP_TEST_PASSWORD }}"
          },
          "run": "./node_modules/.bin/firebase emulators:exec --only firestore \"\n  yarn run web start > /dev/null &\n  yarn run test --coverage\n\"\n"
        },
        {
          "name": "Upload coverage information to codecov",
          "uses": "codecov/codecov-action@v1",
          "with": {
            "file": "./coverage/coverage-final.json",
            "fail_ci_if_error": false
          }
        }
      ]
    },
    "Lint": {
      "runs-on": "ubuntu-18.04",
      "steps": [
        {
          "name": "Checkout code repository",
          "uses": "actions/checkout@v2"
        },
        {
          "name": "Setup node.js",
          "uses": "actions/setup-node@v2",
          "with": {
            "node-version": 14
          }
        },
        {
          "id": "step_cache_deps",
          "name": "Cache dependencies",
          "uses": "actions/cache@v2",
          "with": {
            "path": "node_modules\n*/*/node_modules\n~/.cache/firebase\n~/.cache/ms-playwright\n.yarn/cache\n",
            "key": "${{ runner.os }}-deps-v6-${{ hashFiles('yarn.lock') }}"
          }
        },
        {
          "name": "Install Dependencies",
          "run": "date\nyarn install --immutable\ndate\necho \"[DEBUG] CACHE_HIT: $CACHE_HIT\"\nif [ \"$CACHE_HIT\" != \"true\" ]\nthen\n  echo \"[DEBUG] installing\"\n  yarn run web firebase setup:emulators:firestore\nfi\nls -lrth ~/.cache/firebase/emulators/\n",
          "env": {
            "CACHE_HIT": "${{ steps.step_cache_deps.outputs.cache-hit }}"
          }
        },
        {
          "name": "Check files",
          "run": "ls ./packages/**/dist/"
        },
        {
          "name": "Lint",
          "run": "yarn run lint ."
        },
        {
          "name": "Check actions configration",
          "run": "hash1=$(sha1sum .github/workflows/main.yml)\n./node_modules/.bin/js-yaml .github/temp/main.yml > .github/workflows/main.yml\nhash2=$(sha1sum .github/workflows/main.yml)\necho \"$hash1\" \"$hash2\"\nif [ \"$hash1\" != \"$hash2\" ]; then exit 1; fi\n"
        }
      ]
    },
    "Preview": {
      "runs-on": "ubuntu-18.04",
      "steps": [
        {
          "name": "Checkout code repository",
          "uses": "actions/checkout@v2"
        },
        {
          "name": "Setup node.js",
          "uses": "actions/setup-node@v2",
          "with": {
            "node-version": 14
          }
        },
        {
          "id": "step_cache_deps",
          "name": "Cache dependencies",
          "uses": "actions/cache@v2",
          "with": {
            "path": "node_modules\n*/*/node_modules\n~/.cache/firebase\n~/.cache/ms-playwright\n.yarn/cache\n",
            "key": "${{ runner.os }}-deps-v6-${{ hashFiles('yarn.lock') }}"
          }
        },
        {
          "name": "Install Dependencies",
          "run": "date\nyarn install --immutable\ndate\necho \"[DEBUG] CACHE_HIT: $CACHE_HIT\"\nif [ \"$CACHE_HIT\" != \"true\" ]\nthen\n  echo \"[DEBUG] installing\"\n  yarn run web firebase setup:emulators:firestore\nfi\nls -lrth ~/.cache/firebase/emulators/\n",
          "env": {
            "CACHE_HIT": "${{ steps.step_cache_deps.outputs.cache-hit }}"
          }
        },
        {
          "name": "Configrate firebase",
          "env": {
            "FIREBASE_CLIENT_JSON": "${{ secrets.FIREBASE_CLIENT_JSON }}",
            "FIREBASE_TOKEN": "${{ secrets.FIREBASE_TOKEN }}"
          },
          "run": "echo \"${FIREBASE_CLIENT_JSON}\" > ./packages/web/config/firebase.client.json\nexport FIREBASE_PROJECT_ID=$(scripts/simple_jq.js ./packages/web/config/firebase.client.json .projectId)\nyarn run web firebase use --add $FIREBASE_PROJECT_ID\n"
        },
        {
          "name": "Build",
          "run": "yarn run build:website\n"
        },
        {
          "id": "step_branch",
          "name": "Get the branch name",
          "run": "echo \"::set-output name=branch::$(node scripts/slugify-branch.js)\"\n"
        },
        {
          "name": "Deploy @rino.app/home to Vercel",
          "uses": "amondnet/vercel-action@v20",
          "with": {
            "github-comment": false,
            "vercel-token": "${{ secrets.VERCEL_TOKEN }}",
            "github-token": "${{ secrets.GITHUB_TOKEN }}",
            "vercel-org-id": "${{ secrets.VERCEL_ORG_ID }}",
            "vercel-project-id": "${{ secrets.VERCEL_PROJECT_ID_HOME }}",
            "alias-domains": "rino-home-${{ steps.step_branch.outputs.branch }}.ocavue.vercel.app",
            "vercel-args": "--meta TYPE=PREVIEW",
            "working-directory": "./packages/home/"
          }
        },
        {
          "name": "Deploy @rino.app/web to Vercel",
          "uses": "amondnet/vercel-action@v20",
          "with": {
            "github-comment": false,
            "vercel-token": "${{ secrets.VERCEL_TOKEN }}",
            "github-token": "${{ secrets.GITHUB_TOKEN }}",
            "vercel-org-id": "${{ secrets.VERCEL_ORG_ID }}",
            "vercel-project-id": "${{ secrets.VERCEL_PROJECT_ID_WEB }}",
            "alias-domains": "rino-web-${{ steps.step_branch.outputs.branch }}.ocavue.vercel.app",
            "vercel-args": "--meta TYPE=PREVIEW",
            "working-directory": "./packages/web/"
          }
        },
        {
          "uses": "jwalton/gh-find-current-pr@v1",
          "id": "step_find_pr",
          "with": {
            "github-token": "${{ secrets.GITHUB_TOKEN }}"
          },
          "continue-on-error": true
        },
        {
          "uses": "marocchino/sticky-pull-request-comment@v2",
          "with": {
            "GITHUB_TOKEN": "${{ secrets.GITHUB_TOKEN }}",
            "number": "${{ steps.step_find_pr.outputs.pr }}",
            "message": "## Preview Deployment\n${{ github.sha }}:\n- https://rino-web-${{ steps.step_branch.outputs.branch }}.ocavue.vercel.app\n- https://rino-home-${{ steps.step_branch.outputs.branch }}.ocavue.vercel.app\n"
          },
          "continue-on-error": true
        },
        {
          "name": "Generate configrations for Lighthouse CI",
          "run": "node scripts/generate-lighthouserc.js"
        },
        {
          "name": "Run lighthouse",
          "env": {
            "GITHUB_TOKEN": "${{ secrets.GITHUB_TOKEN }}",
            "LHCI_GITHUB_APP_TOKEN": "${{ secrets.LHCI_GITHUB_APP_TOKEN }}"
          },
          "run": "yarn run lhci autorun --config .lighthouserc.web.json\nyarn run lhci autorun --config .lighthouserc.home.json\n"
        }
      ]
    },
    "Release": {
      "runs-on": "ubuntu-18.04",
      "needs": [
        "Build website",
        "Build electron",
        "Test",
        "Lint",
        "Preview"
      ],
      "if": "github.ref == 'refs/heads/master'",
      "steps": [
        {
          "id": "step_release_please",
          "uses": "GoogleCloudPlatform/release-please-action@v2",
          "with": {
            "token": "${{ secrets.CHANGESET_GITHUB_TOKEN }}",
            "release-type": "simple"
          }
        }
      ],
      "outputs": {
        "published": "${{ steps.step_release_please.outputs.release_created }}",
        "tag_name": "${{ steps.step_release_please.outputs.tag_name }}"
      }
    },
    "Deployment": {
      "runs-on": "ubuntu-18.04",
      "needs": [
        "Release"
      ],
      "if": "github.ref == 'refs/heads/master' && ( needs.Release.outputs.published == 'true' || contains(github.event.head_commit.message, '[force-deploy]') )",
      "steps": [
        {
          "name": "Checkout code repository",
          "uses": "actions/checkout@v2"
        },
        {
          "name": "Setup node.js",
          "uses": "actions/setup-node@v2",
          "with": {
            "node-version": 14
          }
        },
        {
          "name": "Download dist (web)",
          "uses": "actions/download-artifact@v2",
          "with": {
            "name": "web_dist",
            "path": "./packages/web/dist"
          }
        },
        {
          "name": "Download dist (home)",
          "uses": "actions/download-artifact@v2",
          "with": {
            "name": "home_dist",
            "path": "./packages/home/dist"
          }
        },
        {
          "name": "Download dist (electron)",
          "uses": "actions/download-artifact@v2",
          "with": {
            "name": "electron_dist",
            "path": "./packages/electron/dist"
          }
        },
        {
          "name": "Upload @rino.app/electron to GitHub Release",
          "uses": "svenstaro/upload-release-action@v2",
          "with": {
            "repo_token": "${{ secrets.GITHUB_TOKEN }}",
            "file": "./packages/electron/dist/*",
            "tag": "${{ needs.Release.outputs.tag_name }}",
            "overwrite": true,
            "file_glob": true
          }
        },
        {
          "name": "Deploy @rino.app/home to Vercel",
          "uses": "amondnet/vercel-action@v20",
          "with": {
            "github-comment": false,
            "vercel-token": "${{ secrets.VERCEL_TOKEN }}",
            "github-token": "${{ secrets.GITHUB_TOKEN }}",
            "vercel-org-id": "${{ secrets.VERCEL_ORG_ID }}",
            "vercel-project-id": "${{ secrets.VERCEL_PROJECT_ID_HOME }}",
            "alias-domains": "rino-home-master.ocavue.vercel.app",
            "vercel-args": "--prod --meta TYPE=PRODUCTION",
            "working-directory": "./packages/home/"
          }
        },
        {
          "name": "Prepare HTML files",
          "run": "bash ./scripts/prepare-server-files.sh"
        }
      ]
    }
  }
}
