name: main

on: push

env:
  NEXT_TELEMETRY_DISABLED: 1 # https://nextjs.org/telemetry

jobs:
  Build:
    runs-on: ubuntu-18.04
    steps:
      - &step_checkout
        name: Checkout code repository
        uses: actions/checkout@v2

      - &step_setup_node
        name: Setup node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - &step_cache_deps
        id: step_cache_deps
        name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            */*/node_modules
            ~/.cache/firebase
            ~/.cache/ms-playwright
            .yarn/cache
          key: ${{ runner.os }}-deps-v5-${{ hashFiles('yarn.lock') }}

      - &step_install_deps
        name: Install Dependencies
        # Reinstall node modules even if `cache-hit` is `true` because we need to build symlinks for Yarn workspace
        run: |
          date
          yarn install --immutable
          date
          echo "[DEBUG] CACHE_HIT: $CACHE_HIT"
          if [ "$CACHE_HIT" != "true" ]
          then
            echo "[DEBUG] installing"
            yarn run web firebase setup:emulators:firestore
          fi
          ls -lrth ~/.cache/firebase/emulators/
        env:
          CACHE_HIT: ${{ steps.step_cache_deps.outputs.cache-hit }}

      - &step_config_firebase
        name: Configrate firebase
        env:
          FIREBASE_CLIENT_JSON: ${{ secrets.FIREBASE_CLIENT_JSON }}
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }} # https://firebase.google.com/docs/cli#cli-ci-systems
        run: |
          echo "${FIREBASE_CLIENT_JSON}" > ./packages/web/config/firebase.client.json
          export FIREBASE_PROJECT_ID=$(scripts/simple_jq.js ./packages/web/config/firebase.client.json .projectId)
          yarn run web firebase use --add $FIREBASE_PROJECT_ID

      - name: Build
        run: |
          yarn run build:all

      - name: Upload dist (web)
        uses: actions/upload-artifact@v2
        with:
          name: web_dist
          path: ./packages/web/dist

      - name: Upload dist (home)
        uses: actions/upload-artifact@v2
        with:
          name: home_dist
          path: ./packages/home/dist

  Test:
    runs-on: ubuntu-18.04
    steps:
      - *step_checkout
      - *step_setup_node
      - *step_cache_deps
      - *step_install_deps
      - *step_config_firebase

      - name: Build static files
        env:
          REACT_APP_TEST_USERNAME: ${{ secrets.REACT_APP_TEST_USERNAME }}
          REACT_APP_TEST_PASSWORD: ${{ secrets.REACT_APP_TEST_PASSWORD }}
          REACT_APP_TESTING: 1
        run: |
          export FIREBASE_DATABASE_EMULATOR_HOST="localhost:$(scripts/simple_jq.js ./packages/web/firebase.json .emulators.database.port)"
          export FIRESTORE_EMULATOR_HOST="localhost:$(scripts/simple_jq.js ./packages/web/firebase.json .emulators.firestore.port)"
          echo "firebase environment variables:" $FIREBASE_DATABASE_EMULATOR_HOST $FIRESTORE_EMULATOR_HOST
          yarn run build:all

      - name: Run tests
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }} # https://firebase.google.com/docs/cli#cli-ci-systems
          REACT_APP_TEST_USERNAME: ${{ secrets.REACT_APP_TEST_USERNAME }}
          REACT_APP_TEST_PASSWORD: ${{ secrets.REACT_APP_TEST_PASSWORD }}
        run: |
          ./node_modules/.bin/firebase emulators:exec --only firestore "
            yarn run web start > /dev/null &
            yarn run test --coverage
          "

      - name: Upload coverage information to codecov
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage/coverage-final.json
          fail_ci_if_error: false # Specify if CI pipeline should fail when Codecov runs into errors during upload. Defaults to false

  Lint:
    runs-on: ubuntu-18.04
    steps:
      - *step_checkout
      - *step_setup_node
      - *step_cache_deps
      - *step_install_deps

      - name: Check files
        run: ls ./packages/**/dist/

      - name: Lint
        run: yarn run lint .

      - name: Check actions configration
        run: |
          hash1=$(sha1sum .github/workflows/main.yml)
          ./node_modules/.bin/js-yaml .github/temp/main.yml > .github/workflows/main.yml
          hash2=$(sha1sum .github/workflows/main.yml)
          echo "$hash1" "$hash2"
          if [ "$hash1" != "$hash2" ]; then exit 1; fi

  Preview: # Preview deployment
    runs-on: ubuntu-18.04
    needs: [Build]
    steps:
      - *step_checkout
      - *step_setup_node
      - *step_cache_deps
      - *step_install_deps
      - &step_download_web_dist
        name: Download dist (web)
        uses: actions/download-artifact@v2
        with:
          name: web_dist
          path: ./packages/web/dist
      - &step_download_home_dist
        name: Download dist (home)
        uses: actions/download-artifact@v2
        with:
          name: home_dist
          path: ./packages/home/dist

      - id: step_branch
        name: Get the branch name
        run: |
          echo "::set-output name=branch::$(node scripts/slugify-branch.js)"

      - name: Deploy @rino.app/home to Vercel
        uses: &vercel_action amondnet/vercel-action@v20
        with: &vercel_args
          github-comment: false
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_HOME }}
          alias-domains: rino-home-${{ steps.step_branch.outputs.branch }}.ocavue.vercel.app
          vercel-args: '--meta TYPE=PREVIEW'
          working-directory: './packages/home/'

      - name: Deploy @rino.app/web to Vercel
        uses: *vercel_action
        with:
          <<: *vercel_args
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_WEB }}
          alias-domains: rino-web-${{ steps.step_branch.outputs.branch }}.ocavue.vercel.app
          vercel-args: '--meta TYPE=PREVIEW'
          working-directory: './packages/web/'

      - uses: jwalton/gh-find-current-pr@v1
        id: step_find_pr
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ steps.step_find_pr.outputs.pr }}
          message: |
            ## Preview Deployment
            ${{ github.sha }}:
            - https://rino-web-${{ steps.step_branch.outputs.branch }}.ocavue.vercel.app
            - https://rino-home-${{ steps.step_branch.outputs.branch }}.ocavue.vercel.app
        continue-on-error: true

      - name: Generate configrations for Lighthouse CI
        run: node scripts/generate-lighthouserc.js

      - name: Run lighthouse
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }} # Install this GitHub App and get the token: https://github.com/apps/lighthouse-ci
        run: |
          yarn run lhci autorun --config .lighthouserc.web.json
          yarn run lhci autorun --config .lighthouserc.home.json

  Changesets:
    runs-on: ubuntu-18.04
    needs: [Build, Test, Lint, Preview]
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v2
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0

          # Use a custom token instead of the default ${{ secrets.GITHUB_TOKEN }} since Github will not tirgger any CI workflow from ${{ secrets.GITHUB_TOKEN }}
          token: ${{ secrets.CHANGESET_GITHUB_TOKEN }}

      - *step_setup_node
      - *step_cache_deps
      - *step_install_deps

      - id: step_changesets
        name: Create release pull request or publish to npm
        uses: changesets/action@master
        with:
          version: yarn changeset:version
          publish: yarn changeset:publish
          commit: "chore(changesets): release a new version"
          title: "chore(changesets): release a new version"
        env:
          GITHUB_TOKEN: ${{ secrets.CHANGESET_GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

    outputs:
      published: ${{ steps.step_changesets.outputs.published }}

  Deployment: # Production deployment
    runs-on: ubuntu-18.04
    needs: [Changesets]
    if: github.ref == 'refs/heads/master' && ( needs.Changesets.outputs.published == 'true' || contains(github.event.head_commit.message, '[force-deploy]') )
    steps:
      - *step_checkout
      - *step_setup_node
      - *step_cache_deps
      - *step_install_deps
      - *step_download_web_dist
      - *step_download_home_dist
      - *step_config_firebase

      - name: Upload @rino.app/electron to GitHub Release
        run: |
          yarn run election publish

      - name: Deploy @rino.app/web to Firebase
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          yarn run web firebase deploy

      - name: Deploy @rino.app/home to Vercel
        uses: *vercel_action
        with:
          <<: *vercel_args
          alias-domains: rino-home-master.ocavue.vercel.app
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_HOME }}
          vercel-args: '--prod --meta TYPE=PRODUCTION'
          working-directory: './packages/home/'

      - name: Deploy @rino.app/web to Vercel
        uses: *vercel_action
        with:
          <<: *vercel_args
          alias-domains: rino-web-master.ocavue.vercel.app
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_WEB }}
          vercel-args: '--prod --meta TYPE=PRODUCTION'
          working-directory: './packages/web/'

      - name: Prepare HTML files
        run: bash ./scripts/prepare-server-files.sh

      - name: Deploy @rino.app/server to Vercel
        uses: *vercel_action
        with:
          <<: *vercel_args
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_SERVER }}
          alias-domains: rino-server-{{BRANCH}}.ocavue.vercel.app
          vercel-args: '--prod --meta TYPE=PRODUCTION'
          working-directory: './packages/server/'
