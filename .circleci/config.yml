version: 2.1

workflows:
  version: 2
  main_workflow:
    jobs:
      - test:
          # `filters` is required since `deploy` has tag filters AND requires `test`
          filters: &default_filters
            tags:
              only: /.*/
            branches:
              only: /.*/
      - build:
          filters: *default_filters
      - lint:
          filters: *default_filters
      - release_check:
          filters: &release_filters
            tags:
              only: /^v\d+\.\d+\.\d+.*/
            branches:
              ignore: /.*/
      # Deploy to Firebase hosting (https://rino.app) only when a new version is released.
      - deploy_firebase_prod:
          filters: *release_filters
          requires: [test, build, lint, release_check]
      # Deploy to Netlify (https://netlify.rino.app) for master branch.
      - deploy_netlify_prod:
          filters:
            branches:
              only: master
          requires: [test, build, lint]
      # Deploy to Netlify draft (https://xxxxxxxxxxxxxxxxx--rino.netlify.com) for all branchs.
      - deploy_netlify_test:
          requires: [build]
          filters: *default_filters

executors:
  node-executor:
    docker:
      - image: circleci/node:12-stretch-browsers
    environment:
      NEXT_TELEMETRY_DISABLED: "1"

commands:
  prepare:
    steps:
      - checkout
      - restore_cache:
          key: &cache_key v0-dependencies-{{ checksum "yarn.lock" }}
      # Only install dependencies if the cache is failed to restore
      - run: |
          if [ ! -d "./node_modules" ]; then
            yarn install --frozen-lockfile
          fi

  upload_cache:
    steps:
      - save_cache:
          paths:
            - node_modules
            - .next/cache # https://err.sh/next.js/no-cache
          key: *cache_key

jobs:
  lint:
    executor: node-executor
    steps:
      - prepare
      - run: yarn run lint

  test:
    executor: node-executor
    steps:
      - prepare
      - run: |
          echo ${FIREBASE_CLIENT_JSON} > ./config/firebase.client.json
      - run: |
          export REACT_APP_TESTING=1
          yarn build
          yarn export
      - run: |
          ./scripts/http-server.js > /dev/null &
          yarn run test --coverage
      - run: |
          yarn run coverage

  build:
    executor: node-executor
    steps:
      - prepare
      - run: |
          echo ${FIREBASE_CLIENT_JSON} > ./config/firebase.client.json
      - run: |
          yarn run build
          yarn run export
      - persist_to_workspace:
          root: ./dist
          paths:
            - .
      - upload_cache

  release_check:
    docker:
      - image: python:3.7-stretch
    steps:
      - checkout
      - run: |
          ./scripts/verify-version.py

  deploy_netlify_test:
    executor: node-executor
    steps:
      - prepare
      - attach_workspace:
          at: ./dist
      - run: |
          echo '<!-- Netlify -->' >> ./dist/index.html
          echo '<!-- Netlify -->' >> ./dist/404.html
      - run: |
          message="Deployment from Circle CI. Ref: $(git rev-parse --abbrev-ref HEAD). Commit: $(git rev-parse --short HEAD)."
          command="./node_modules/.bin/netlify deploy --json --message '$message'"
          echo $command
          bash -c "$command" > /tmp/deploy.json
          cat /tmp/deploy.json
      - run: |
          export DEPLOY_JSON="$(cat /tmp/deploy.json)"
          export DEPLOY_URL="$(node -e 'console.log(JSON.parse(process.env.DEPLOY_JSON).deploy_url)')"
          mkdir -p lighthouse
          yarn lighthouse --output json --output html --output-path ./lighthouse/lighthouse $DEPLOY_URL
      - store_artifacts:
          path: ./lighthouse

  deploy_netlify_prod:
    executor: node-executor
    environment:
      EXTRA_NETLIFY_ARGS: "--prod"
    steps:
      - prepare
      - attach_workspace:
          at: ./dist
      - run: |
          echo '<!-- Netlify -->' >> ./dist/index.html
          echo '<!-- Netlify -->' >> ./dist/404.html
      - run: |
          message="Deployment from Circle CI. Ref: $(git rev-parse --abbrev-ref HEAD). Commit: $(git rev-parse --short HEAD)."
          command="./node_modules/.bin/netlify deploy --json --message '$message' --prod"
          echo $command
          bash -c "$command"

  deploy_firebase_prod:
    executor: node-executor
    steps:
      - prepare
      - attach_workspace:
          at: ./dist
      - run: |
          echo '<!-- Firebase hosting -->' >> ./dist/index.html
          echo '<!-- Firebase hosting -->' >> ./dist/404.html
      - run: |
          echo ${FIREBASE_CLIENT_JSON} > ./config/firebase.client.json
          export FIREBASE_PROJECT_ID=$(node -e 'console.log(require("./config/firebase.client.json").projectId)')
          yarn firebase use --add $FIREBASE_PROJECT_ID
          yarn firebase deploy
